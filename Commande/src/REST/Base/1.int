ROUTINE REST.Base.1 [Type=INT,Generated]
 ;REST.Base.1
 ;Generated for class REST.Base.  Do NOT edit. 11/14/2021 06:58:15PM
 ;;62716641;REST.Base
 ;
%ProcessResult(pStatus,pResult="") public { s:'($d(pStatus)#2) pStatus=1
  SET tSC = 1
  IF ('pStatus) {
    SET %response.Status = 500
    SET tSC = ..StatusToJSON(pStatus, .tJSON)
    IF $isobject(tJSON) {
      SET pResult = tJSON
    } ELSE {
      SET pResult = { "errors": [ { "error": "Unknown error parsing status code" } ] }
    }
  } 
  ELSEIF pStatus=1 {
    IF '$isobject(pResult){
      SET pResult = {
      }
    }
  }
  ELSE {
    SET %response.Status = pStatus
    SET error = $PIECE(pStatus, " ", 2, *)
    SET pResult = {
      "error": (error)
    }
  }
  IF pResult.%Extends("%Library.DynamicAbstractObject") {
    WRITE pResult.%ToJSON()
  }
  ELSEIF pResult.%Extends("%JSON.Adaptor") {
    DO pResult.%JSONExport()
  }
  ELSEIF pResult.%Extends("%Stream.Object") {
    DO pResult.OutputToDevice()
  }
  QUIT tSC }
zOnPreDispatch(pUrl,pMethod,pContinue) public {
  SET tSC = 1
  TRY {
    // Set the return type according to the Accept type in the request. Default is application/json.
    IF ('..AcceptsContentType(..#CONTENTTYPEJSON)) {
      SET tSC = ..ReportHttpStatusCode(..#HTTP406NOTACCEPTABLE), pContinue=0
      QUIT 
        } ELSE {   
      // This always returns json
      SET %response.ContentType=..#CONTENTTYPEJSON
        }
        // read request object into %DynamicObject format
    IF ((pMethod'="POST") && (pMethod'="PUT")) || (%request.Content="") {
      SET %request.Content = {}
    } ELSE {
      IF '$isobject(%request.Content) {
        SET tContent = %request.Content
      } ELSE {
        SET tContent = ""
        WHILE '%request.Content.AtEnd {
          SET tContent = tContent_%request.Content.Read()
        }
      }
      IF (tContent="") {
        SET %request.Content = {}
      } ELSE {
        SET tContent = $zconvert(tContent, "I", "UTF8")
        SET %request.Content = ##class(%Library.DynamicObject).%FromJSON(tContent)
      }
    }
  } CATCH ex {
    SET tSC = ex.AsStatus()
  }
  QUIT ##class(%iKnow.REST.Base).%ErrorHandler(tSC, .pContinue)
}
zReportHttpStatusCode(pHttpStatus,pSC) public { s:'($d(pSC)#2) pSC=1
  Set %response.Status=pHttpStatus
  If ('pSC) Do ..outputStatus(pSC)
  /*
  If (+pHttpStatus>=400) {
    Set %response.ContentType = "application/json"
    SET pResult = {
      "error": ($PIECE(pHttpStatus, " ", 2, *))
    }
    Return ..%ProcessResult($$$OK, pResult)
  }*/
  Return 1 }
zSupportedVerbs(pUrl,pVerbs) public {
 Set pVerbs="",tSC=1
 Do {
   Set tSC=..ResolveTarget(pUrl,.tTargetUrl,.tTargetClass)
   If ('tSC)||((tTargetUrl="")&&(tTargetClass="")) Quit
   If (tTargetUrl'=pUrl)&&(tTargetClass'=$classname()) {
       Set tSC=$zobjclassmethod(tTargetClass,"SupportedVerbs",tTargetUrl,.pVerbs)
       Quit
   }
 } while 0
 Quit tSC }