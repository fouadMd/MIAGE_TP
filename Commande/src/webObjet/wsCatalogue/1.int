ROUTINE webObjet.wsCatalogue.1 [Type=INT,Generated]
 ;webObjet.wsCatalogue.1
 ;Generated for class webObjet.wsCatalogue.  Do NOT edit. 11/14/2021 06:58:16PM
 ;;44335055;webObjet.wsCatalogue
 ;
%GetSerial(force=0)
	i i%marque="",i%modele="",i%nbPlaces="",i%prix="",i%type="" Quit ""
	Quit $lb(i%marque,i%modele,i%type,,i%nbPlaces,i%prix)
%IsNull()
	i (..marque'="")||(..modele'="")||(..nbPlaces'="")||(..prix'="")||(..type'="") Quit 0
	Quit 1
%JSONExportInternal() public {
  Set sc=1
  Write "{" Set sep=""
  Set value=..marque
  If value'="" {
    Write sep_"""marque"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..modele
  If value'="" {
    Write sep_"""modele"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..type
  If value'="" {
    Write sep_"""type"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..nbPlaces
  If value'="" {
    Write sep_"""nbPlaces"":"_value
    Set $extract(sep,1)=","
  }
  Set value=..prix
  If value'="" {
    Write sep_"""prix"":"_value
    Set $extract(sep,1)=","
  }
  Write "}"
%JSONExportExit Quit sc }
%JSONExportToStringInternal() public {
  Set sc=1
  Set %export=%export_"{" Set sep=""
  Set value=..marque
  If value'="" {
    Set %export=%export_sep_"""marque"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..modele
  If value'="" {
    Set %export=%export_sep_"""modele"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..type
  If value'="" {
    Set %export=%export_sep_"""type"":"""_$select((value=$c(0)):"",1:$zcvt(value,"O","JSON"))_""""
    Set $extract(sep,1)=","
  }
  Set value=..nbPlaces
  If value'="" {
    Set %export=%export_sep_"""nbPlaces"":"_value
    Set $extract(sep,1)=","
  }
  Set value=..prix
  If value'="" {
    Set %export=%export_sep_"""prix"":"_value
    Set $extract(sep,1)=","
  }
  Set %export=%export_"}"
%JSONExportExitToString Quit sc }
%JSONImportInternal() public {
  Set sc=1
  Set testInvalidField=1
  Set proplist("marque")=""
  Set field="marque" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"illegalvalue",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If jsontype="null" {
      Set ..marque=""
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.marque
      If ('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) Goto %JSONImportError
      If data="" Set data=$c(0)
      Set ..marque=data
    }
  }
  Set proplist("modele")=""
  Set field="modele" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"illegalvalue",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If jsontype="null" {
      Set ..modele=""
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.modele
      If ('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) Goto %JSONImportError
      If data="" Set data=$c(0)
      Set ..modele=data
    }
  }
  Set proplist("type")=""
  Set field="type" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"illegalvalue",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If jsontype="null" {
      Set ..type=""
    } Else {
      If jsontype'="string" Goto %JSONImportError
      Set data=%JSONObject.type
      If ('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) Goto %JSONImportError
      If data="" Set data=$c(0)
      Set ..type=data
    }
  }
  Set proplist("nbPlaces")=""
  Set field="nbPlaces" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"illegalvalue",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If jsontype="null" {
      Set ..nbPlaces=""
    } Else {
      If jsontype'="number" Goto %JSONImportError
      Set data=%JSONObject.nbPlaces
      Set data=$s($tr(data,"Ee(),.")'=data:"",1:$number(data,"I")) Goto:data="" %JSONImportError If ('$select(data=$c(0)&&$zu(115,13):1,$isvalidnum(data,0):1,1:$$Error^%apiOBJ(7207,data))) Goto %JSONImportError
      Set ..nbPlaces=data
    }
  }
  Set proplist("prix")=""
  Set field="prix" Set jsontype=$CASE(%JSONObject.%GetTypeCodeOf(field),0:"null",1:"boolean",2:"boolean",3:"number",4:"number",6:"array",7:"object",8:"string",9:"number",10:"illegalvalue",11:"number",12:"oref",13:"unassigned",14:"number",15:"number",16:"string",18:"number",19:"number",20:"string",31:"unassigned",:"UNKNOWN")
  If jsontype'="unassigned" {
    If jsontype="null" {
      Set ..prix=""
    } Else {
      If jsontype'="number" Goto %JSONImportError
      Set data=%JSONObject.prix
      Set data=$s($tr(data,"Ee(),.")'=data:"",1:$number(data,"I")) Goto:data="" %JSONImportError If ('$select(data=$c(0)&&$zu(115,13):1,$isvalidnum(data,0):1,1:$$Error^%apiOBJ(7207,data))) Goto %JSONImportError
      Set ..prix=data
    }
  }
  If $get(testInvalidField) {
    Set invalid=0,iterator=%JSONObject.%GetIterator()
    While iterator.%GetNext(.key,.value) { If $data(proplist(key))=0 Set invalid=1 Quit  }
    If invalid Quit $$Error^%apiOBJ(9404,key,$select(%mappingName="":"class base",1:%mappingName))
  }
%JSONImportExit Quit sc
%JSONImportError Quit $$Error^%apiOBJ(9406,field,$select(%mappingName="":"class base",1:%mappingName)) }
%JSONNew(dynamicObject,containerOref="") public {
  Quit ##class(webObjet.wsCatalogue).%New()
}
%NormalizeObject() public {
	If '$system.CLS.GetModified() Quit 1
	If m%marque Set:i%marque'="" i%marque=(..marqueNormalize(i%marque))
	If m%modele Set:i%modele'="" i%modele=(..modeleNormalize(i%modele))
	If m%nbPlaces Set:i%nbPlaces'="" i%nbPlaces=(..nbPlacesNormalize(i%nbPlaces))
	If m%prix Set:i%prix'="" i%prix=(..prixNormalize(i%prix))
	If m%type Set:i%type'="" i%type=(..typeNormalize(i%type))
	Quit 1 }
%ObjectIsNull(pOID) public {
	If $isobject(pOID)=1 Set pOID=pOID."%%OID"
	if pOID = "" quit 1
	set class = $listget(pOID,2)
	if class '= "" {
		set class=$s(class="":"",class[".":class,$e(class)'="%":"User."_class,1:"%Library."_$e(class,2,*)) if $classname()'=class quit $classmethod(class,"%ObjectIsNull",pOID)
	}
	quit $listget(pOID)="" }
%SetSerial(val) public {
	If val="" {
		Set i%marque="",i%modele="",i%nbPlaces="",i%prix="",i%type=""
	} Else {
		Set i%marque=$lg(val,1),i%modele=$lg(val,2),i%type=$lg(val,3),i%nbPlaces=$lg(val,5),i%prix=$lg(val,6)
	}
	Quit 1 }
%ValidateObject(unused=0,checkserial=1) public {
	set sc=1
	If '$system.CLS.GetModified() Quit sc
	If m%marque Set iv=..marque If iv'="" Set rc=(..marqueIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"marque",iv)
	If m%modele Set iv=..modele If iv'="" Set rc=(..modeleIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"modele",iv)
	If m%nbPlaces Set iv=..nbPlaces If iv'="" Set rc=(..nbPlacesIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"nbPlaces",iv)
	If m%prix Set iv=..prix If iv'="" Set rc=(..prixIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"prix",iv)
	If m%type Set iv=..type If iv'="" Set rc=(..typeIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"type",iv)
	Quit sc }
zLogicalToOdbc(val="") public {
	Quit $listget(val,1)_","_$listget(val,2)_","_$listget(val,3)_","_$listget(val,4)_","_$listget(val,5)_","_$listget(val,6) }
zOdbcToLogical(val="") public {
	Quit $lb($piece(val,",",1),$piece(val,",",2),$piece(val,",",3),$piece(val,",",4),$piece(val,",",5),$piece(val,",",6)) }
zXMLDTD(top,format,input,dtdlist)
 Quit ##class(%XML.Implementation).XMLDTD("webObjet.wsCatalogue",.top,.format,.input,.dtdlist)
zXMLExportInternal()
 New tag,summary,attrsVal,savelocal,aval,k,tmpPrefix,prefixDepth,hasNoContent,hasElement,topAttrs,beginprefix,endprefix,savexsiAttrs,initialxsiAttrs,initlist,initialCR,inlineFlag,popAtEnd,saveTopPrefix,saveTypesPrefix,saveAttrsPrefix,saveUsePrefix,initlist
 Set $ztrap="XMLExportInternalTrap",popAtEnd=0
 Set summary=summaryArg,initialxsiAttrs=xsiAttrs
 If group Quit $$Error^%apiOBJ(6386,"webObjet.wsCatalogue")
 If indentFlag Set initialCR=($extract(currentIndent,1,2)=$c(13,10))
 Set id=createId
 Set temp=""
 If id'="" {
   If $piece($get(idlist(+$this)),",",2)'="" Quit 1
   Set idlist(+$this)=id_",1"
 }
 If encoded Set initlist=$lb($get(oreflist),inlineFlagArg),oreflist=1,inlineFlag=inlineFlagArg
 Set tag=$get(topArg)
 Set tmpi=(($get(typeAttr)'="")&&(typeAttr'="webObjet.wsCatalogue"))
 If $IsObject(namespaces) {
     Set popAtEnd=1,saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
     Set sc=namespaces.PushNodeForExport("",$get(local,0),(encoded||tmpi),"",,.topPrefix,.topAttrs,.typesPrefix,.attrsPrefix,.usePrefix)
     If 'sc Quit sc
   Set beginprefix=$select(namespaces.ElementQualified&&usePrefix:typesPrefix,1:"")
   If topAttrs'="" Set temp=temp_" "_topAttrs
   If tag="" Set tag="wsCatalogue"
   Set xsitype=namespaces.OutputTypeAttribute
 } Else {
   Set saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
   Set typesPrefix=namespaces If (typesPrefix'=""),($extract(typesPrefix,*)'=":") Set typesPrefix=typesPrefix_":"
   If 'encoded Set namespaces=""
   Set (topPrefix,attrsPrefix,topAttrs,beginprefix)=""
   If tag="" Set tag=typesPrefix_"wsCatalogue"
   Set xsitype=0
 }
 Set local=+$get(local),savelocal=local
 Set endprefix="</"_beginprefix,beginprefix="<"_beginprefix
 If tmpi Set temp=temp_" "_xsiPrefix_"type="""_typesPrefix_"wsCatalogue"""_xsiAttrs,xsiAttrs=""
   If id'="" Set temp=" "_$select($get(soap12):soapPrefix_"id",1:"id")_"=""id"_id_""""_temp
 If encoded Set temp=temp_xsiAttrs,xsiAttrs=""
 If indentFlag Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } Set currentIndent=$select(initialCR:"",1:$c(13,10))_currentIndent_indentChars
 If tag[":" Set topPrefix=$piece(tag,":"),tag=$piece(tag,":",2)  If topPrefix'="" Set topPrefix=topPrefix_":"
 Set %xmlmsg="<"_topPrefix_tag_temp if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set attrsVal=attrsArg,attrsArg="" Set %xmlmsg=attrsVal if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set %xmlmsg=">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..marque
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"marque"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"marque>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..modele
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"modele"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"modele>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..type
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"type"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"type>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..nbPlaces
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"nbPlaces"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"long""",1:"")_">"_val_endprefix_"nbPlaces>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..prix
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"prix"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"long""",1:"")_">"_val_endprefix_"prix>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 If indentFlag { Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }}
 Set %xmlmsg="</"_topPrefix_tag_">"
 if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } If indentFlag,'initialCR if $data(%xmlBlock) { Set %xmlmsg="" Do xeWriteLine^%occXMLInternal } else { write ! } Set $extract(currentIndent,1,2)=""
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 If encoded Set oreflist=$list(initlist),inlineFlag=$list(initlist,2)
 Quit sc
XMLExportInternalTrap Set $ztrap=""
 If $data(val) , $IsObject(val) , ($piece($ze,">",1)="<METHOD DOES NOT EXIST") {
   Set sc=$$Error^%apiOBJ(6249,$classname(val))
 } Else {
   Set sc=$$Error^%apiOBJ(5002,$ze)
 }
XMLExportExit 
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 Quit sc
zXMLGetSchemaImports(imports,classes)
 Quit ##class(%XML.Implementation).XMLGetSchemaImports("webObjet.wsCatalogue",.imports,.classes)
zXMLImportAttributes()
 ;
 Quit 1
XMLImportAttrErr Quit $$Error^%apiOBJ(6260,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportFixedAttrErr Quit $$Error^%apiOBJ(6320,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportAttrLocation(nodelist) new msg,loc
 Set loc=$lb($zlascii(nodelist,21),$zlascii(nodelist,25))
 If loc="" Quit ""
 Set msg=$get(^%qMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
zXMLImportInternal()
 New child,childlist,node,nodelist,inner,innerlist,data,encodedArray,key,nsIndex,savechild,savechildlist,saveinner,saveinnnerlist,exists
 Set $ztrap="XMLImportInternalTrap"
 Set encoded=$case($piece(fmt,",",1),"":0,"literal":0,"encoded":1,"encoded12":1,:"")
 If encoded="" Quit $$Error^%apiOBJ(6231,fmt)
 Set nsIndex=$select($get(namespace)="":"",1:$get(@(tree)@("N",namespace)))
 Set node=nodeArg,nodelist=nodeArgChildlist
 If tag'=@(tree)@("d",$zlascii(nodelist,9)) Set inner=node Goto XMLImportMalformed
 If bareProjection Quit $$Error^%apiOBJ(6386,"webObjet.wsCatalogue")
 If encoded {
   Do XMLImportAttrnode() If $data(attributeList("id")) Set idlist(node)=$this
 }
 If $zboolean(+($zlascii(nodelist,13)#16),+1,1) Quit 1
 Set sc=$$XMLImportElements()
XMLImportExit Quit sc
XMLImportElements() ;
XMLLOOP1 Set descriptor=$zlascii(nodelist,$zwascii(nodelist,17)) Set child=($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)_","_$zwascii(nodelist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else { Set child="" }} For { Quit:child=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} } Goto XMLLOOP2
XMLLOOP For  { Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} Quit:child=""  Quit:(descriptor#16)'=2  }
XMLLOOP2 If child="" Quit sc
 If (descriptor#16)'=0 Set inner=child Goto XMLImportMalformedNoTag
 Set childlist=@(tree)@((descriptor\16))
 Set tag=@(tree)@("d",$zlascii(childlist,9))
 If tag="marque" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..marque=data
   Goto XMLLOOP } }
 If tag="modele" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..modele=data
   Goto XMLLOOP } }
 If tag="type" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..type=data
   Goto XMLLOOP } }
 If tag="nbPlaces" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=$s($tr(data,"Ee(),.")'=data:"",1:$number(data,"I")) Goto:data="" XMLImportErrchild Goto:('$select(data=$c(0)&&$zu(115,13):1,$isvalidnum(data,0):1,1:$$Error^%apiOBJ(7207,data))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..nbPlaces=data
   Goto XMLLOOP } }
 If tag="prix" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=$s($tr(data,"Ee(),.")'=data:"",1:$number(data,"I")) Goto:data="" XMLImportErrchild Goto:('$select(data=$c(0)&&$zu(115,13):1,$isvalidnum(data,0):1,1:$$Error^%apiOBJ(7207,data))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..prix=data
   Goto XMLLOOP } }
 Goto XMLImportBadTagchild
XMLImportBadTagchild Set inner=child
XMLImportBadTag Quit $$Error^%apiOBJ(6237,tag_$$XMLImportLocation(inner))
XMLImportBadTypenode Set inner=node Goto XMLImportBadType
XMLImportBadTypechild Set inner=child
XMLImportBadType Quit $$Error^%apiOBJ(6277,class,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner))
XMLImportErrnode Set inner=node Goto XMLImportErr
XMLImportErrchild Set inner=child
XMLImportErr
 Set data=##class(%XML.ImportHandler).GetNextChild(tree,inner,"")
 If (data'="") {
   If ($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))#16)'=0 {
     Quit $$Error^%apiOBJ(6232,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),$extract(@(tree)@("d",($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),1,200))
   } Else {
     Quit $$Error^%apiOBJ(6253,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),9)))
   }
 } Else {
   Quit $$Error^%apiOBJ(6252,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner))
 }
XMLImportIdErr Set sc=$$Error^%apiOBJ(6236,id,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformed Set sc=$$Error^%apiOBJ(6233,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformedNoTag Set node=$select($piece(inner,",",1)<=0:0,1:$zlascii(@(tree)@($piece(inner,",",1)),1)_","_$zlascii(@(tree)@($piece(inner,",",1)),5)),sc=$$Error^%apiOBJ(6254,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16))),$select(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)))_$$XMLImportLocation(node)) Quit sc
XMLImportNSchild Set inner=child
XMLImportNS Set sc=$$Error^%apiOBJ(6235,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportLocation(node) new msg,loc
 Set loc=$lb($zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),21),$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),25))
 If loc="" Quit ""
 Set msg=$get(^%qMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
XMLImportInternalTrap Set $ztrap=""
 Set loc=$select($ZE["<CLASS DOES NOT EXIST>":" for element "_tag_$$XMLImportLocation(child),1:"")
 Quit $$Error^%apiOBJ(5002,$ZE_loc)
XMLImportIdChild() Set inner=child,innerlist=childlist,tmp=$$XMLImportId(),child=inner,childlist=innerlist Quit tmp
XMLImportId() ;
 Do XMLImportAttrinner()
 If $data(attributeList("href")) {
   Set id=$case($data(@(tree)@("d",$zlascii(attributeList("href"),13))),1:@(tree)@("d",$zlascii(attributeList("href"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("href")))
   If $extract(id)="#" {
     Set tmp=$select($get(@(tree)@("i",$extract(id,2,*)))="":"",1:$piece(@(tree)@("i",$extract(id,2,*)),",",1)_","_$piece(@(tree)@("i",$extract(id,2,*)),",",2)) If tmp="" Goto XMLImportIdErr
     Set inner=tmp
     Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
   }
 } ElseIf $data(attributeList("ref")),($get(@(tree)@("n",$zwascii(attributeList("ref"),9)))="http://www.w3.org/2003/05/soap-encoding") {
   Set id=$case($data(@(tree)@("d",$zlascii(attributeList("ref"),13))),1:@(tree)@("d",$zlascii(attributeList("ref"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("ref")))
   Set tmp=$select($get(@(tree)@("i",id))="":"",1:$piece(@(tree)@("i",id),",",1)_","_$piece(@(tree)@("i",id),",",2)) If tmp="" Goto XMLImportIdErr
   Set inner=tmp
   Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
 } ElseIf '$data(attributeList("id")) {
   Quit 0
 }
 Quit $data(idlist(inner))
XMLImportAttrnode()
 If $get(attributeList)=node Quit
 Kill attributeList
 Set attributeList=node
 Set offset=29 While offset<$zwascii(nodelist,17) { Set attribute=$extract(nodelist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrchild()
 If $get(attributeList)=child Quit
 Kill attributeList
 Set attributeList=child
 Set offset=29 While offset<$zwascii(childlist,17) { Set attribute=$extract(childlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrinner()
 If $get(attributeList)=inner Quit
 Kill attributeList
 Set attributeList=inner
 Set offset=29 While offset<$zwascii(innerlist,17) { Set attribute=$extract(innerlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
zXMLIsObjectEmpty(ignoreNull)
 If ..marque'="" Quit 0
 If ..modele'="" Quit 0
 If ..type'="" Quit 0
 If ..nbPlaces'="" Quit 0
 If ..prix'="" Quit 0
 Quit 1
zXMLNew(document,node,containerOref="")
	Quit (##class(webObjet.wsCatalogue).%New())
zXMLSchema(top="",format="",namespacePrefix="",input=0,refOnly=0,schema)
 Quit ##class(%XML.Implementation).XMLSchema("webObjet.wsCatalogue",top,format,namespacePrefix,input,refOnly,.schema)
znbPlacesDisplayToLogical(%val) public {
	Q $select(%val="":"",%val=$c(0)&&$zu(115,13):"",1:$s($in(%val,"","")'="":+$in(%val,"",%val),1:%val)) }
znbPlacesIsValid(%val) public {
	Quit $select(%val=$c(0)&&$zu(115,13):1,$isvalidnum(%val,0):1,1:$$Error^%apiOBJ(7207,%val)) }
znbPlacesNormalize(%val) public {
	Quit $select(%val=$c(0)&&$zu(115,13):"",1:%val\1) }
znbPlacesXSDToLogical(%val) public {
	Q $s($tr(%val,"Ee(),.")'=%val:"",1:$number(%val,"I")) }